#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:N.N.NNNNN.N
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RazorGenerator.Core.Test
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Text;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "v.v.v.v")]
    public partial class TemplateTest : TemplateTestBase
    {
#line hidden

        public override void Execute()
        {


WriteLiteral("\r\n\r\n");


WriteLiteral("\r\n<?xml version=\"1.0\" ?>\r\n<tests>\r\n");


     foreach (var result in TestResults) { 

WriteLiteral("        <test id=\"");


             Write(result.Id);

WriteLiteral("\">\r\n            <name>");


             Write(result.Name);

WriteLiteral("</name>\r\n            <result>\r\n");


             if(result.Passed) {

WriteLiteral("                ");

WriteLiteral(" Success\r\n");


            }
            else{

WriteLiteral("                ");

WriteLiteral(" Failed\r\n");


            }

WriteLiteral("            </result>\r\n        </test>\r\n");


    }

WriteLiteral("</test>\r\n");


        }
        public string TransformText()
        {
            this.Execute();
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    public class TemplateTestBase
    {
        private System.Text.StringBuilder _generatingEnvironment = new System.Text.StringBuilder();
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                return this._generatingEnvironment;
            }
            set
            {
                this._generatingEnvironment = value;
            }
        }
        public virtual void Execute()
        {
        }
        public void WriteLiteral(string textToAppend)
        {
            
        if (String.IsNullOrEmpty(textToAppend)) {
            return; 
        }
        this.GenerationEnvironment.Append(textToAppend);;
        }
        public void Write(object value)
        {

                if ((value == null))
                {
                    return;
                }
                string stringValue;
                System.Type t = value.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null)) 
                {
                    stringValue = value.ToString();
                }
                else {
                    stringValue = ((string)(method.Invoke(value, new object[] { System.Globalization.CultureInfo.InvariantCulture })));
                }
                WriteLiteral(stringValue);
            
        }
    }
    #endregion
}
#pragma warning restore 1591
